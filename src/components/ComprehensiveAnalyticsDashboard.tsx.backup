import React, { useEffect, useState, useMemo, useRef } from "react";
import { collection, getDocs, query, where, orderBy, onSnapshot } from "firebase/firestore";
import { db } from "../firebase";
import { Invoice, Client, Product } from "../types";
import { useRealTimeIndicator } from "../hooks/useRealTimeIndicator";
import RealTimeIndicator from "./RealTimeIndicator";
import { useNotifications } from "../hooks/useNotifications";
import NotificationToast from "./NotificationToast";
import {
  TrendLineChart,
  PerformanceBarChart,
  DistributionPieChart,
  StatusDoughnutChart,
  RevenueLineChart,
  ClientPerformanceChart,
} from "./charts/InteractiveCharts";
import { HeatMap } from "./charts/HeatMap";
import {
  prepareTrendData,
  prepareRevenueTrendData,
  prepareClientDistributionData,
  prepareProductPerformanceData,
  prepareClientPerformanceData,
  prepareStatusBreakdownData,
  prepareOperationalHeatMapData,
  prepareMonthlyComparisonData,
} from "../utils/chartDataUtils";

interface DailyAnalytics {
  date: string;
  totalInvoices: number;
  totalClients: number;
  totalWeight: number;
  totalItems: number;
  totalCarts: number;
  totalRevenue: number;
  avgItemsPerInvoice: number;
  avgWeightPerInvoice: number;
  avgRevenuePerInvoice: number;
  clientBreakdown: {
    [clientId: string]: {
      clientName: string;
      invoiceCount: number;
      totalWeight: number;
      totalItems: number;
      totalCarts: number;
      totalRevenue: number;
    };
  };
  productBreakdown: {
    [productName: string]: {
      totalQuantity: number;
      totalRevenue: number;
      invoiceCount: number;
    };
  };
  statusBreakdown: {
    active: number;
    completed: number;
    verified: number;
    shipped: number;
  };
}

interface DateRange {
  start: string;
  end: string;
}

interface ProductBreakdownWithPercent {
  productName: string;
  totalQuantity: number;
  totalRevenue: number;
  invoiceCount: number;
  percentage: number;
}

const ComprehensiveAnalyticsDashboard: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [clients, setClients] = useState<Client[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [dateRange, setDateRange] = useState<DateRange>(() => {
    const today = new Date();
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(today.getDate() - 30);
    
    return {
      start: thirtyDaysAgo.toISOString().slice(0, 10),
      end: today.toISOString().slice(0, 10)
    };
  });
  
  const [selectedDate, setSelectedDate] = useState<string>(
    new Date().toISOString().slice(0, 10)
  );
  
  const [viewMode, setViewMode] = useState<'daily' | 'range' | 'comparison' | 'productBreakdown'>('daily');
  const [productFilter, setProductFilter] = useState<string>('');
  const [sortBy, setSortBy] = useState<'quantity' | 'percentage' | 'revenue'>('quantity');

  // Real-time indicators
  const invoicesIndicator = useRealTimeIndicator('Invoices');
  const clientsIndicator = useRealTimeIndicator('Clients');
  const productsIndicator = useRealTimeIndicator('Products');
  const { addNotification } = useNotifications();
  const { notifications, removeNotification } = useNotifications();

  // Track previous counts for change detection
  const prevCountsRef = useRef({ invoices: 0, clients: 0, products: 0 });
  const isInitialLoadRef = useRef(true);

  // Real-time listeners for data updates
  useEffect(() => {
    console.log('Setting up real-time listeners for analytics dashboard...');
    
    // Invoices real-time listener
    const unsubInvoices = onSnapshot(collection(db, "invoices"), (snapshot) => {
      invoicesIndicator.setUpdating(true);
      
      const invoicesData = snapshot.docs.map(doc => ({ 
        id: doc.id, 
        ...doc.data() 
      })) as Invoice[];
      
      // Check for changes and show notifications
      if (!isInitialLoadRef.current) {
        const prevCount = prevCountsRef.current.invoices;
        const newCount = invoicesData.length;
        
        if (newCount > prevCount) {
          const diff = newCount - prevCount;
          addNotification({
            type: 'success',
            title: 'ðŸ“Š New Invoice Data',
            message: `${diff} new invoice${diff > 1 ? 's' : ''} added`,
            duration: 3000,
          });
        } else if (newCount !== prevCount) {
          addNotification({
            type: 'info',
            title: 'ðŸ“Š Invoice Data Updated',
            message: `Invoices updated (${newCount} total)`,
            duration: 2000,
          });
        }
      }
      
      prevCountsRef.current.invoices = invoicesData.length;
      setInvoices(invoicesData);
      invoicesIndicator.markUpdate('Invoices');
      console.log(`ðŸ“Š Invoices updated: ${invoicesData.length} records`);
    });

    // Clients real-time listener
    const unsubClients = onSnapshot(collection(db, "clients"), (snapshot) => {
      clientsIndicator.setUpdating(true);
      
      const clientsData = snapshot.docs.map(doc => ({ 
        id: doc.id, 
        ...doc.data() 
      })) as Client[];
      
      // Check for changes and show notifications
      if (!isInitialLoadRef.current) {
        const prevCount = prevCountsRef.current.clients;
        const newCount = clientsData.length;
        
        if (newCount > prevCount) {
          const diff = newCount - prevCount;
          addNotification({
            type: 'success',
            title: 'ðŸ‘¥ New Client Data',
            message: `${diff} new client${diff > 1 ? 's' : ''} added`,
            duration: 3000,
          });
        } else if (newCount !== prevCount) {
          addNotification({
            type: 'info',
            title: 'ðŸ‘¥ Client Data Updated',
            message: `Clients updated (${newCount} total)`,
            duration: 2000,
          });
        }
      }
      
      prevCountsRef.current.clients = clientsData.length;
      setClients(clientsData);
      clientsIndicator.markUpdate('Clients');
      console.log(`ðŸ‘¥ Clients updated: ${clientsData.length} records`);
    });

    // Products real-time listener
    const unsubProducts = onSnapshot(collection(db, "products"), (snapshot) => {
      productsIndicator.setUpdating(true);
      
      const productsData = snapshot.docs.map(doc => ({ 
        id: doc.id, 
        ...doc.data() 
      })) as Product[];
      
      // Check for changes and show notifications
      if (!isInitialLoadRef.current) {
        const prevCount = prevCountsRef.current.products;
        const newCount = productsData.length;
        
        if (newCount > prevCount) {
          const diff = newCount - prevCount;
          addNotification({
            type: 'success',
            title: 'ðŸ“¦ New Product Data',
            message: `${diff} new product${diff > 1 ? 's' : ''} added`,
            duration: 3000,
          });
        } else if (newCount !== prevCount) {
          addNotification({
            type: 'info',
            title: 'ðŸ“¦ Product Data Updated',
            message: `Products updated (${newCount} total)`,
            duration: 2000,
          });
        }
      }
      
      prevCountsRef.current.products = productsData.length;
      setProducts(productsData);
      productsIndicator.markUpdate('Products');
      console.log(`ðŸ“¦ Products updated: ${productsData.length} records`);
    });

    setLoading(false);
    
    // Mark initial load as complete after a short delay
    setTimeout(() => {
      isInitialLoadRef.current = false;
    }, 2000);

    // Cleanup listeners
    return () => {
      unsubInvoices();
      unsubClients();
      unsubProducts();
      console.log('Analytics dashboard listeners cleaned up');
    };
  }, []);

  // Utility function to normalize date strings to local date format (YYYY-MM-DD)
  // This prevents timezone issues when comparing dates
  const normalizeDate = (dateInput: string | Date): string => {
    if (!dateInput) return '';
    
    let date: Date;
    if (typeof dateInput === 'string') {
      // Handle different date string formats
      if (dateInput.includes('T')) {
        // ISO string with time - parse and extract local date
        date = new Date(dateInput);
      } else if (dateInput.includes('-')) {
        // YYYY-MM-DD format - parse as local date to avoid timezone issues
        const [year, month, day] = dateInput.split('-').map(Number);
        date = new Date(year, month - 1, day); // month is 0-indexed
      } else {
        date = new Date(dateInput);
      }
    } else {
      date = dateInput;
    }
    
    // Return local date string in YYYY-MM-DD format
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    
    return `${year}-${month}-${day}`;
  };

  // Calculate analytics for a specific date
  const calculateDailyAnalytics = (targetDate: string): DailyAnalytics => {
    const normalizedTargetDate = normalizeDate(targetDate);
    
    const dayInvoices = invoices.filter(invoice => {
      if (!invoice.date) return false;
      const normalizedInvoiceDate = normalizeDate(invoice.date);
      return normalizedInvoiceDate === normalizedTargetDate;
    });

    const analytics: DailyAnalytics = {
      date: targetDate,
      totalInvoices: dayInvoices.length,
      totalClients: new Set(dayInvoices.map(inv => inv.clientId)).size,
      totalWeight: 0,
      totalItems: 0,
      totalCarts: 0,
      totalRevenue: 0,
      avgItemsPerInvoice: 0,
      avgWeightPerInvoice: 0,
      avgRevenuePerInvoice: 0,
      clientBreakdown: {},
      productBreakdown: {},
      statusBreakdown: {
        active: 0,
        completed: 0,
        verified: 0,
        shipped: 0
      }
    };

    dayInvoices.forEach(invoice => {
      const client = clients.find(c => c.id === invoice.clientId);
      const clientName = client?.name || invoice.clientName || 'Unknown';
      
      // Calculate invoice totals
      const invoiceWeight = invoice.totalWeight || 0;
      const invoiceCarts = invoice.carts?.length || 0;
      const invoiceItems = invoice.carts?.reduce((total, cart) => 
        total + (cart.items?.reduce((cartTotal, item) => cartTotal + (item.quantity || 0), 0) || 0), 0
      ) || 0;
      
      // Calculate revenue
      const invoiceRevenue = invoice.carts?.reduce((total, cart) => 
        total + (cart.items?.reduce((cartTotal, item) => 
          cartTotal + ((item.quantity || 0) * (item.price || 0)), 0) || 0), 0
      ) || 0;

      // Update totals
      analytics.totalWeight += invoiceWeight;
      analytics.totalItems += invoiceItems;
      analytics.totalCarts += invoiceCarts;
      analytics.totalRevenue += invoiceRevenue;

      // Client breakdown
      if (!analytics.clientBreakdown[invoice.clientId]) {
        analytics.clientBreakdown[invoice.clientId] = {
          clientName,
          invoiceCount: 0,
          totalWeight: 0,
          totalItems: 0,
          totalCarts: 0,
          totalRevenue: 0
        };
      }
      
      const clientData = analytics.clientBreakdown[invoice.clientId];
      clientData.invoiceCount += 1;
      clientData.totalWeight += invoiceWeight;
      clientData.totalItems += invoiceItems;
      clientData.totalCarts += invoiceCarts;
      clientData.totalRevenue += invoiceRevenue;

      // Product breakdown
      invoice.carts?.forEach(cart => {
        cart.items?.forEach(item => {
          if (!analytics.productBreakdown[item.productName]) {
            analytics.productBreakdown[item.productName] = {
              totalQuantity: 0,
              totalRevenue: 0,
              invoiceCount: 0
            };
          }
          
          const productData = analytics.productBreakdown[item.productName];
          productData.totalQuantity += item.quantity || 0;
          productData.totalRevenue += (item.quantity || 0) * (item.price || 0);
          productData.invoiceCount += 1;
        });
      });

      // Status breakdown
      if (invoice.status === 'done') {
        analytics.statusBreakdown.shipped += 1;
      } else if (invoice.verified) {
        analytics.statusBreakdown.verified += 1;
      } else if (invoice.status === 'completed') {
        analytics.statusBreakdown.completed += 1;
      } else {
        analytics.statusBreakdown.active += 1;
      }
    });

    // Calculate averages
    if (analytics.totalInvoices > 0) {
      analytics.avgItemsPerInvoice = Math.round((analytics.totalItems / analytics.totalInvoices) * 100) / 100;
      analytics.avgWeightPerInvoice = Math.round((analytics.totalWeight / analytics.totalInvoices) * 100) / 100;
      analytics.avgRevenuePerInvoice = Math.round((analytics.totalRevenue / analytics.totalInvoices) * 100) / 100;
    }

    return analytics;
  };

  // Get analytics for selected date
  const selectedDateAnalytics = useMemo(() => {
    return calculateDailyAnalytics(selectedDate);
  }, [selectedDate, invoices, clients, products]);

  // Get analytics for date range
  const rangeAnalytics = useMemo(() => {
    const startDate = new Date(dateRange.start + 'T00:00:00'); // Ensure local timezone
    const endDate = new Date(dateRange.end + 'T00:00:00'); // Ensure local timezone
    const analytics: DailyAnalytics[] = [];
    
    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
      const dateStr = normalizeDate(d);
      analytics.push(calculateDailyAnalytics(dateStr));
    }
    
    return analytics;
  }, [dateRange, invoices, clients, products]);

  // Calculate product breakdown with percentages for selected date
  const productBreakdownData = useMemo(() => {
    const analytics = calculateDailyAnalytics(selectedDate);
    const products: ProductBreakdownWithPercent[] = [];
    
    // Calculate total quantity to determine percentages
    const totalQuantity = Object.values(analytics.productBreakdown)
      .reduce((sum, product) => sum + product.totalQuantity, 0);
    
    // Convert to array with percentages
    Object.entries(analytics.productBreakdown).forEach(([productName, data]) => {
      const percentage = totalQuantity > 0 ? (data.totalQuantity / totalQuantity) * 100 : 0;
      products.push({
        productName,
        totalQuantity: data.totalQuantity,
        totalRevenue: data.totalRevenue,
        invoiceCount: data.invoiceCount,
        percentage: Math.round(percentage * 100) / 100
      });
    });
    
    // Filter by search term
    const filteredProducts = products.filter(product =>
      product.productName.toLowerCase().includes(productFilter.toLowerCase())
    );
    
    // Sort by selected criteria
    filteredProducts.sort((a, b) => {
      switch (sortBy) {
        case 'quantity':
          return b.totalQuantity - a.totalQuantity;
        case 'percentage':
          return b.percentage - a.percentage;
        case 'revenue':
          return b.totalRevenue - a.totalRevenue;
        default:
          return b.totalQuantity - a.totalQuantity;
      }
    });
    
    return { products: filteredProducts, totalQuantity };
  }, [selectedDate, invoices, clients, products, productFilter, sortBy]);

  // Format currency
  const formatCurrency = (amount: number) => `$${amount.toFixed(2)}`;

  // Format date for display
  const formatDate = (dateStr: string) => {
    // Parse as local date to avoid timezone issues
    const [year, month, day] = dateStr.split('-').map(Number);
    const date = new Date(year, month - 1, day);
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  if (loading) {
    return (
      <div className="container py-4">
        <div className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
          <div className="mt-2">Loading comprehensive analytics...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="container-fluid py-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2 className="mb-0">ðŸ“Š Comprehensive Analytics Dashboard</h2>
        
        {/* Real-time Indicators */}
        <div className="d-flex gap-3">
          <RealTimeIndicator 
            status={invoicesIndicator.status} 
            size="small" 
            showDetails={false}
          />
          <RealTimeIndicator 
            status={clientsIndicator.status} 
            size="small" 
            showDetails={false}
          />
          <RealTimeIndicator 
            status={productsIndicator.status} 
            size="small" 
            showDetails={false}
          />
        </div>
      </div>
      
      {/* Data Summary Bar */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="alert alert-info d-flex justify-content-between align-items-center">
            <div>
              <strong>Live Data:</strong> 
              {invoices.length} invoices, {clients.length} clients, {products.length} products
            </div>
            <div className="text-end">
              <small>
                Last Update: {invoicesIndicator.status.lastUpdate 
                  ? invoicesIndicator.status.lastUpdate.toLocaleTimeString()
                  : 'Loading...'
                }
              </small>
            </div>
          </div>
        </div>
      </div>
      
      {/* View Mode Selection */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="btn-group" role="group">
            <button
              type="button"
              className={`btn ${viewMode === 'daily' ? 'btn-primary' : 'btn-outline-primary'}`}
              onClick={() => setViewMode('daily')}
            >
              Daily Analysis
            </button>
            <button
              type="button"
              className={`btn ${viewMode === 'range' ? 'btn-primary' : 'btn-outline-primary'}`}
              onClick={() => setViewMode('range')}
            >
              Date Range Analysis
            </button>
            <button
              type="button"
              className={`btn ${viewMode === 'comparison' ? 'btn-primary' : 'btn-outline-primary'}`}
              onClick={() => setViewMode('comparison')}
            >
              Performance Comparison
            </button>
            <button
              type="button"
              className={`btn ${viewMode === 'productBreakdown' ? 'btn-primary' : 'btn-outline-primary'}`}
              onClick={() => setViewMode('productBreakdown')}
            >
              ðŸ“¦ Product Breakdown
            </button>
          </div>
        </div>
      </div>

      {/* Daily Analysis View */}
      {viewMode === 'daily' && (
        <>
          {/* Date Selection */}
          <div className="row mb-4">
            <div className="col-md-4">
              <label className="form-label">Select Date for Analysis:</label>
              <input
                type="date"
                className="form-control"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                max={new Date().toISOString().slice(0, 10)}
              />
            </div>
          </div>

          {/* Summary Cards */}
          <div className="row mb-4">
            <div className="col-md-3 mb-3">
              <div className="card bg-primary text-white">
                <div className="card-body text-center">
                  <h5 className="card-title">{selectedDateAnalytics.totalInvoices}</h5>
                  <p className="card-text">Total Invoices</p>
                </div>
              </div>
            </div>
            <div className="col-md-3 mb-3">
              <div className="card bg-success text-white">
                <div className="card-body text-center">
                  <h5 className="card-title">{selectedDateAnalytics.totalClients}</h5>
                  <p className="card-text">Active Clients</p>
                </div>
              </div>
            </div>
            <div className="col-md-3 mb-3">
              <div className="card bg-info text-white">
                <div className="card-body text-center">
                  <h5 className="card-title">{selectedDateAnalytics.totalWeight.toFixed(1)} lbs</h5>
                  <p className="card-text">Total Weight</p>
                </div>
              </div>
            </div>
            <div className="col-md-3 mb-3">
              <div className="card bg-warning text-dark">
                <div className="card-body text-center">
                  <h5 className="card-title">{formatCurrency(selectedDateAnalytics.totalRevenue)}</h5>
                  <p className="card-text">Total Revenue</p>
                </div>
              </div>
            </div>
          </div>

          {/* Interactive Charts Section */}
          <div className="row mb-4">
            {/* Status Breakdown Doughnut Chart */}
            <div className="col-md-6 mb-4">
              <div className="card">
                <div className="card-body">
                  <StatusDoughnutChart
                    data={prepareStatusBreakdownData(selectedDateAnalytics)}
                    title={`Invoice Status - ${formatDate(selectedDate)}`}
                    height={300}
                  />
                </div>
              </div>
            </div>

            {/* Client Distribution Pie Chart */}
            <div className="col-md-6 mb-4">
              <div className="card">
                <div className="card-body">
                  <DistributionPieChart
                    data={prepareClientDistributionData(selectedDateAnalytics)}
                    title={`Client Revenue Distribution - ${formatDate(selectedDate)}`}
                    height={300}
                  />
                </div>
              </div>
            </div>
          </div>

          <div className="row mb-4">
            {/* Product Performance Bar Chart */}
            <div className="col-md-8 mb-4">
              <div className="card">
                <div className="card-body">
                  <PerformanceBarChart
                    data={prepareProductPerformanceData(selectedDateAnalytics)}
                    title={`Product Performance - ${formatDate(selectedDate)}`}
                    height={400}
                    options={{
                      scales: {
                        y: {
                          type: 'linear',
                          display: true,
                          position: 'left',
                          title: {
                            display: true,
                            text: 'Quantity'
                          }
                        },
                        y1: {
                          type: 'linear',
                          display: true,
                          position: 'right',
                          title: {
                            display: true,
                            text: 'Revenue ($)'
                          },
                          grid: {
                            drawOnChartArea: false,
                          },
                        },
                      },
                    }}
                  />
                </div>
              </div>
            </div>

            {/* Key Metrics Summary */}
            <div className="col-md-4 mb-4">
              <div className="card h-100">
                <div className="card-header">
                  <h6 className="mb-0">ðŸ“Š Daily Summary</h6>
                </div>
                <div className="card-body">
                  <div className="row g-3">
                    <div className="col-12">
                      <div className="border rounded p-3 text-center bg-primary text-white">
                        <h4 className="mb-1">{selectedDateAnalytics.totalInvoices}</h4>
                        <small>Total Invoices</small>
                      </div>
                    </div>
                    <div className="col-6">
                      <div className="border rounded p-2 text-center bg-light">
                        <h6 className="mb-1">{selectedDateAnalytics.totalClients}</h6>
                        <small>Clients</small>
                      </div>
                    </div>
                    <div className="col-6">
                      <div className="border rounded p-2 text-center bg-light">
                        <h6 className="mb-1">{selectedDateAnalytics.totalItems}</h6>
                        <small>Items</small>
                      </div>
                    </div>
                    <div className="col-12">
                      <div className="border rounded p-3 text-center bg-info text-white">
                        <h5 className="mb-1">{selectedDateAnalytics.totalWeight.toFixed(1)} lbs</h5>
                        <small>Total Weight</small>
                      </div>
                    </div>
                    <div className="col-12">
                      <div className="border rounded p-3 text-center bg-success text-white">
                        <h5 className="mb-1">{formatCurrency(selectedDateAnalytics.totalRevenue)}</h5>
                        <small>Total Revenue</small>
                      </div>
                    </div>
                    <div className="col-6">
                      <div className="border rounded p-2 text-center bg-light">
                        <h6 className="mb-1">{selectedDateAnalytics.avgItemsPerInvoice}</h6>
                        <small>Avg Items</small>
                      </div>
                    </div>
                    <div className="col-6">
                      <div className="border rounded p-2 text-center bg-light">
                        <h6 className="mb-1">{formatCurrency(selectedDateAnalytics.avgRevenuePerInvoice)}</h6>
                        <small>Avg Revenue</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Client Performance Horizontal Bar Chart */}
          <div className="row mb-4">
            <div className="col-12">
              <div className="card">
                <div className="card-body">
                  <ClientPerformanceChart
                    data={prepareClientPerformanceData(selectedDateAnalytics)}
                    title={`Top Clients by Revenue - ${formatDate(selectedDate)}`}
                    height={400}
                  />
                </div>
              </div>
            </div>
          </div>
                          .slice(0, 10)
                          .map(([productName, product]) => (
                            <tr key={productName}>
                              <td>{productName}</td>
                              <td>{product.totalQuantity}</td>
                              <td>{formatCurrency(product.totalRevenue)}</td>
                              <td>{product.invoiceCount}</td>
                            </tr>
                          ))}
                      </tbody>
                    </table>
                  </div>
                  {Object.keys(selectedDateAnalytics.productBreakdown).length === 0 && (
                    <p className="text-muted text-center">No product activity for this date</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        </>
      )}

      {/* Date Range Analysis View */}
      {viewMode === 'range' && (
        <>
          {/* Date Range Selection */}
          <div className="row mb-4">
            <div className="col-md-3">
              <label className="form-label">Start Date:</label>
              <input
                type="date"
                className="form-control"
                value={dateRange.start}
                onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                max={new Date().toISOString().slice(0, 10)}
              />
            </div>
            <div className="col-md-3">
              <label className="form-label">End Date:</label>
              <input
                type="date"
                className="form-control"
                value={dateRange.end}
                onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                max={new Date().toISOString().slice(0, 10)}
              />
            </div>
          </div>

          {/* Range Summary */}
          <div className="row mb-4">
            <div className="col-12">
              <div className="card">
                <div className="card-header">
                  <h5 className="mb-0">Range Summary ({formatDate(dateRange.start)} - {formatDate(dateRange.end)})</h5>
                </div>
                <div className="card-body">
                  <div className="row">
                    <div className="col-md-3">
                      <div className="text-center">
                        <h4>{rangeAnalytics.reduce((sum, day) => sum + day.totalInvoices, 0)}</h4>
                        <p>Total Invoices</p>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="text-center">
                        <h4>{formatCurrency(rangeAnalytics.reduce((sum, day) => sum + day.totalRevenue, 0))}</h4>
                        <p>Total Revenue</p>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="text-center">
                        <h4>{rangeAnalytics.reduce((sum, day) => sum + day.totalWeight, 0).toFixed(1)} lbs</h4>
                        <p>Total Weight</p>
                      </div>
                    </div>
                    <div className="col-md-3">
                      <div className="text-center">
                        <h4>{rangeAnalytics.reduce((sum, day) => sum + day.totalItems, 0)}</h4>
                        <p>Total Items</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Daily Breakdown Table */}
          <div className="row mb-4">
            <div className="col-12">
              <div className="card">
                <div className="card-header">
                  <h5 className="mb-0">Daily Breakdown</h5>
                </div>
                <div className="card-body">
                  <div className="table-responsive">
                    <table className="table table-striped">
                      <thead>
                        <tr>
                          <th>Date</th>
                          <th>Invoices</th>
                          <th>Clients</th>
                          <th>Items</th>
                          <th>Weight (lbs)</th>
                          <th>Revenue</th>
                          <th>Avg Rev/Invoice</th>
                        </tr>
                      </thead>
                      <tbody>
                        {rangeAnalytics
                          .filter(day => day.totalInvoices > 0)
                          .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                          .map(day => (
                            <tr key={day.date}>
                              <td>{formatDate(day.date)}</td>
                              <td>{day.totalInvoices}</td>
                              <td>{day.totalClients}</td>
                              <td>{day.totalItems}</td>
                              <td>{day.totalWeight.toFixed(1)}</td>
                              <td>{formatCurrency(day.totalRevenue)}</td>
                              <td>{formatCurrency(day.avgRevenuePerInvoice)}</td>
                            </tr>
                          ))}
                      </tbody>
                    </table>
                  </div>
                  {rangeAnalytics.every(day => day.totalInvoices === 0) && (
                    <p className="text-muted text-center">No data available for the selected date range</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        </>
      )}

      {/* Performance Comparison View */}
      {viewMode === 'comparison' && (
        <>
          <div className="row mb-4">
            <div className="col-12">
              <div className="card">
                <div className="card-header">
                  <h5 className="mb-0">Performance Comparison - Last 7 Days vs Previous 7 Days</h5>
                </div>
                <div className="card-body">
                  {(() => {
                    const today = new Date();
                    const last7Days = Array.from({ length: 7 }, (_, i) => {
                      const date = new Date(today);
                      date.setDate(today.getDate() - i);
                      return normalizeDate(date);
                    });
                    
                    const previous7Days = Array.from({ length: 7 }, (_, i) => {
                      const date = new Date(today);
                      date.setDate(today.getDate() - 7 - i);
                      return normalizeDate(date);
                    });

                    const last7DaysData = last7Days.map(date => calculateDailyAnalytics(date));
                    const previous7DaysData = previous7Days.map(date => calculateDailyAnalytics(date));

                    const last7Total = {
                      invoices: last7DaysData.reduce((sum, day) => sum + day.totalInvoices, 0),
                      revenue: last7DaysData.reduce((sum, day) => sum + day.totalRevenue, 0),
                      weight: last7DaysData.reduce((sum, day) => sum + day.totalWeight, 0),
                      items: last7DaysData.reduce((sum, day) => sum + day.totalItems, 0)
                    };

                    const previous7Total = {
                      invoices: previous7DaysData.reduce((sum, day) => sum + day.totalInvoices, 0),
                      revenue: previous7DaysData.reduce((sum, day) => sum + day.totalRevenue, 0),
                      weight: previous7DaysData.reduce((sum, day) => sum + day.totalWeight, 0),
                      items: previous7DaysData.reduce((sum, day) => sum + day.totalItems, 0)
                    };

                    const calculateChange = (current: number, previous: number) => {
                      if (previous === 0) return current > 0 ? '+100%' : '0%';
                      const change = ((current - previous) / previous) * 100;
                      return `${change >= 0 ? '+' : ''}${change.toFixed(1)}%`;
                    };

                    return (
                      <div className="row">
                        <div className="col-md-3">
                          <div className="text-center">
                            <h4>{last7Total.invoices} vs {previous7Total.invoices}</h4>
                            <p>Invoices</p>
                            <span className={`badge ${last7Total.invoices >= previous7Total.invoices ? 'bg-success' : 'bg-danger'}`}>
                              {calculateChange(last7Total.invoices, previous7Total.invoices)}
                            </span>
                          </div>
                        </div>
                        <div className="col-md-3">
                          <div className="text-center">
                            <h4>{formatCurrency(last7Total.revenue)} vs {formatCurrency(previous7Total.revenue)}</h4>
                            <p>Revenue</p>
                            <span className={`badge ${last7Total.revenue >= previous7Total.revenue ? 'bg-success' : 'bg-danger'}`}>
                              {calculateChange(last7Total.revenue, previous7Total.revenue)}
                            </span>
                          </div>
                        </div>
                        <div className="col-md-3">
                          <div className="text-center">
                            <h4>{last7Total.weight.toFixed(1)} vs {previous7Total.weight.toFixed(1)} lbs</h4>
                            <p>Weight</p>
                            <span className={`badge ${last7Total.weight >= previous7Total.weight ? 'bg-success' : 'bg-danger'}`}>
                              {calculateChange(last7Total.weight, previous7Total.weight)}
                            </span>
                          </div>
                        </div>
                        <div className="col-md-3">
                          <div className="text-center">
                            <h4>{last7Total.items} vs {previous7Total.items}</h4>
                            <p>Items</p>
                            <span className={`badge ${last7Total.items >= previous7Total.items ? 'bg-success' : 'bg-danger'}`}>
                              {calculateChange(last7Total.items, previous7Total.items)}
                            </span>
                          </div>
                        </div>
                      </div>
                    );
                  })()}
                </div>
              </div>
            </div>
          </div>
        </>
      )}

      {/* Product Breakdown View */}
      {viewMode === 'productBreakdown' && (
        <>
          {/* Date Selection and Filters */}
          <div className="row mb-4">
            <div className="col-md-3">
              <label className="form-label">Select Date:</label>
              <input
                type="date"
                className="form-control"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                max={new Date().toISOString().slice(0, 10)}
              />
            </div>
            <div className="col-md-3">
              <label className="form-label">Search Products:</label>
              <input
                type="text"
                className="form-control"
                placeholder="Filter by product name..."
                value={productFilter}
                onChange={(e) => setProductFilter(e.target.value)}
              />
            </div>
            <div className="col-md-3">
              <label className="form-label">Sort By:</label>
              <select
                className="form-select"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as 'quantity' | 'percentage' | 'revenue')}
              >
                <option value="quantity">Quantity (High to Low)</option>
                <option value="percentage">Percentage (High to Low)</option>
                <option value="revenue">Revenue (High to Low)</option>
              </select>
            </div>
            <div className="col-md-3 d-flex align-items-end">
              <div className="w-100">
                <div className="alert alert-info mb-0">
                  <small>
                    <strong>Total Items:</strong> {productBreakdownData.totalQuantity.toLocaleString()}<br />
                    <strong>Date:</strong> {formatDate(selectedDate)}
                  </small>
                </div>
              </div>
            </div>
          </div>

          {/* Product Breakdown Table */}
          <div className="row">
            <div className="col-12">
              <div className="card">
                <div className="card-header">
                  <h5 className="mb-0">
                    ðŸ“¦ Daily Product Breakdown - {formatDate(selectedDate)}
                    {productFilter && (
                      <span className="badge bg-secondary ms-2">
                        Filtered: "{productFilter}"
                      </span>
                    )}
                  </h5>
                </div>
                <div className="card-body">
                  {productBreakdownData.products.length === 0 ? (
                    <div className="text-center py-4">
                      <p className="mb-0">
                        {productFilter 
                          ? `No products found matching "${productFilter}"`
                          : "No products processed on this date"
                        }
                      </p>
                    </div>
                  ) : (
                    <div className="table-responsive">
                      <table className="table table-striped table-hover">
                        <thead className="table-dark">
                          <tr>
                            <th scope="col">#</th>
                            <th scope="col">Product Name</th>
                            <th scope="col">Quantity</th>
                            <th scope="col">Percentage</th>
                            <th scope="col">Revenue</th>
                            <th scope="col">Invoices</th>
                            <th scope="col">Visual</th>
                          </tr>
                        </thead>
                        <tbody>
                          {productBreakdownData.products.map((product, index) => (
                            <tr key={product.productName}>
                              <td>
                                <span className="badge bg-primary">{index + 1}</span>
                              </td>
                              <td>
                                <strong>{product.productName}</strong>
                              </td>
                              <td>
                                <span className="badge bg-success fs-6">
                                  {product.totalQuantity.toLocaleString()}
                                </span>
                              </td>
                              <td>
                                <span className={`badge fs-6 ${
                                  product.percentage > 10 ? 'bg-warning text-dark' :
                                  product.percentage > 5 ? 'bg-info' : 'bg-secondary'
                                }`}>
                                  {product.percentage.toFixed(2)}%
                                </span>
                              </td>
                              <td>
                                <span className="text-success">
                                  {formatCurrency(product.totalRevenue)}
                                </span>
                              </td>
                              <td>
                                <span className="badge bg-outline-primary">
                                  {product.invoiceCount}
                                </span>
                              </td>
                              <td style={{ width: '150px' }}>
                                <div className="progress" style={{ height: '20px' }}>
                                  <div
                                    className="progress-bar bg-primary"
                                    role="progressbar"
                                    style={{ width: `${Math.min(product.percentage, 100)}%` }}
                                    aria-valuenow={product.percentage}
                                    aria-valuemin={0}
                                    aria-valuemax={100}
                                  >
                                    {product.percentage > 5 && (
                                      <small className="text-white fw-bold">
                                        {product.percentage.toFixed(1)}%
                                      </small>
                                    )}
                                  </div>
                                </div>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Summary Stats */}
          {productBreakdownData.products.length > 0 && (
            <div className="row mt-4">
              <div className="col-md-4">
                <div className="card bg-light">
                  <div className="card-body text-center">
                    <h6 className="card-title">Top Product</h6>
                    <p className="card-text">
                      <strong>{productBreakdownData.products[0]?.productName}</strong><br />
                      <span className="text-primary">
                        {productBreakdownData.products[0]?.totalQuantity.toLocaleString()} items 
                        ({productBreakdownData.products[0]?.percentage.toFixed(2)}%)
                      </span>
                    </p>
                  </div>
                </div>
              </div>
              <div className="col-md-4">
                <div className="card bg-light">
                  <div className="card-body text-center">
                    <h6 className="card-title">Product Variety</h6>
                    <p className="card-text">
                      <strong>{productBreakdownData.products.length}</strong><br />
                      <span className="text-info">Different products processed</span>
                    </p>
                  </div>
                </div>
              </div>
              <div className="col-md-4">
                <div className="card bg-light">
                  <div className="card-body text-center">
                    <h6 className="card-title">Average per Product</h6>
                    <p className="card-text">
                      <strong>
                        {productBreakdownData.products.length > 0 
                          ? Math.round(productBreakdownData.totalQuantity / productBreakdownData.products.length)
                          : 0
                        }
                      </strong><br />
                      <span className="text-warning">Items per product type</span>
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}
        </>
      )}

      {/* Footer */}
      <div className="row mt-4">
        <div className="col-12">
          <div className="alert alert-info">
            <strong>ðŸ“Š Analytics Dashboard</strong><br />
            This comprehensive dashboard provides detailed insights into daily operations, client performance, 
            product analysis, and revenue tracking. Data is updated in real-time from all system operations.
          </div>
        </div>
      </div>
      
      {/* Real-time Activity Feed */}
      <div className="row">
        <div className="col-12">
          <div className="card">
            <div className="card-header d-flex justify-content-between align-items-center">
              <h5 className="mb-0">ðŸ”´ Live Activity Monitor</h5>
              <div className="d-flex gap-2">
                <RealTimeIndicator 
                  status={invoicesIndicator.status} 
                  size="small" 
                  showDetails={true}
                />
              </div>
            </div>
            <div className="card-body">
              <div className="row">
                <div className="col-md-4">
                  <div className="border rounded p-3 bg-light">
                    <h6 className="text-primary">ðŸ“Š Invoices Activity</h6>
                    <div className="small">
                      <div>Status: <span className={`badge ${invoicesIndicator.status.isLive ? 'bg-success' : 'bg-secondary'}`}>
                        {invoicesIndicator.status.isUpdating ? 'Updating...' : invoicesIndicator.status.isLive ? 'Live' : 'Offline'}
                      </span></div>
                      <div>Total Records: <strong>{invoices.length}</strong></div>
                      <div>Updates: <strong>{invoicesIndicator.status.updateCount}</strong></div>
                      <div>Last Update: {invoicesIndicator.status.lastUpdate 
                        ? invoicesIndicator.status.lastUpdate.toLocaleTimeString()
                        : 'Never'
                      }</div>
                    </div>
                  </div>
                </div>
                <div className="col-md-4">
                  <div className="border rounded p-3 bg-light">
                    <h6 className="text-info">ðŸ‘¥ Clients Activity</h6>
                    <div className="small">
                      <div>Status: <span className={`badge ${clientsIndicator.status.isLive ? 'bg-success' : 'bg-secondary'}`}>
                        {clientsIndicator.status.isUpdating ? 'Updating...' : clientsIndicator.status.isLive ? 'Live' : 'Offline'}
                      </span></div>
                      <div>Total Records: <strong>{clients.length}</strong></div>
                      <div>Updates: <strong>{clientsIndicator.status.updateCount}</strong></div>
                      <div>Last Update: {clientsIndicator.status.lastUpdate 
                        ? clientsIndicator.status.lastUpdate.toLocaleTimeString()
                        : 'Never'
                      }</div>
                    </div>
                  </div>
                </div>
                <div className="col-md-4">
                  <div className="border rounded p-3 bg-light">
                    <h6 className="text-warning">ðŸ“¦ Products Activity</h6>
                    <div className="small">
                      <div>Status: <span className={`badge ${productsIndicator.status.isLive ? 'bg-success' : 'bg-secondary'}`}>
                        {productsIndicator.status.isUpdating ? 'Updating...' : productsIndicator.status.isLive ? 'Live' : 'Offline'}
                      </span></div>
                      <div>Total Records: <strong>{products.length}</strong></div>
                      <div>Updates: <strong>{productsIndicator.status.updateCount}</strong></div>
                      <div>Last Update: {productsIndicator.status.lastUpdate 
                        ? productsIndicator.status.lastUpdate.toLocaleTimeString()
                        : 'Never'
                      }</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Notification Toast */}
      <NotificationToast 
        notifications={notifications} 
        onRemove={removeNotification}
      />
    </div>
  );
};

export default ComprehensiveAnalyticsDashboard;
